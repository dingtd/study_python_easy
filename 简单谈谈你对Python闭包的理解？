简单谈谈你对Python闭包的理解？
首先闭包的三要素：
1.	内外函数
2.	内函数使用外函数临时变量（存储在内函数中）
3.	外函数返回值为内函数的引用（重点是引用）
外函数结束后，局部变量没有释放给内存，而是将这个临时变量绑定给了内部函数，然后外部函数结束，返回值为内函数使用外部临时变量的引用

内部函数就是一个闭包

闭包=函数+引用环境
函数是一等公民，可以作为里一个函数的参数或返回值，可以赋值给一个变量
不同的外部临时变量对应不同的内部函数引用，符合面向对象的思想
临时变量固定后，闭包也只有一份
类似于 类的实例

如果想对外部临时变量进行修改，要么传递参数，要么nonlocal（向上一层变量空间找这个变量）


什么叫做引用？
Python中一切皆对象，函数也是对象，可以理解为地址，对内存位置的引用
函数名也是绑定函数内容的变量名，保存了函数内存位置的引用

对于闭包，外函数返回内函数的引用，
一个函数，函数名后紧跟一对括号，相当于调用这个函数，
不跟则只是引用，储存函数所在位置的引用

对临时变量的使用要注意区分可变数据类型和不可变数据类型


闭包的应用：
1.	装饰器
闭包的主要应用


2.	面向对象
3.	实现单利模式（高级装饰器）

